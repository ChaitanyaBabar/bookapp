name: Print Release Notes

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to generate release notes from'
        required: true
        default: 'master'

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || 'master' }}

      - name: Print the selected branch
        run: |
          echo "Selected branch: ${{ github.event.inputs.branch || 'master' }}"

      - name: Generate clean release notes with commit links
        run: |
          BRANCH="${{ github.event.inputs.branch || 'master' }}"
          BASE_BRANCH="master"
          REPO_URL="https://github.com/ChaitanyaBabar/bookapp"
          TRACK_FILE=".last_release_commit"
          DELIM="⧫⧫⧫"

          echo "Generating release notes for branch: $BRANCH"
          git fetch origin

          BASE_HASH=""
          BASE_MSG=""
          LAST_RELEASE_DATE=""

          # Step 1: Try to read the previous commit hash and message
          if git show origin/$BRANCH:$TRACK_FILE > /dev/null 2>&1; then
            TRACK_DATA=$(git show origin/$BRANCH:$TRACK_FILE)
            BASE_HASH=$(echo "$TRACK_DATA" | awk -F"$DELIM" '{print $1}')
            BASE_MSG=$(echo "$TRACK_DATA" | awk -F"$DELIM" '{print substr($0, index($0,$2))}')

            # Try to get author date if commit still exists
            if git cat-file -e "$BASE_HASH"^{commit} 2>/dev/null; then
              LAST_RELEASE_DATE=$(git show -s --format=%aI "$BASE_HASH")
              echo "Using last release commit date from $BASE_HASH: $LAST_RELEASE_DATE"
            else
              echo "Tracked commit not found. Searching by message: $BASE_MSG"
              ALT_COMMIT=$(git log --pretty=format:"%H$DELIM%s" origin/$BRANCH | grep -F "$BASE_MSG" | head -n 1 | awk -F"$DELIM" '{print $1}')
              if [ -n "$ALT_COMMIT" ]; then
                LAST_RELEASE_DATE=$(git show -s --format=%aI "$ALT_COMMIT")
                echo "Found matching commit by message. Using date: $LAST_RELEASE_DATE"
              else
                echo "No match found by message. Falling back to merge-base."
                BASE_HASH=$(git merge-base origin/$BASE_BRANCH origin/$BRANCH)
                LAST_RELEASE_DATE=$(git show -s --format=%aI "$BASE_HASH")
                echo "Using merge-base commit $BASE_HASH with date $LAST_RELEASE_DATE"
              fi
            fi
          else
            echo "No previous tracking file. Using merge-base of $BASE_BRANCH and $BRANCH"
            BASE_HASH=$(git merge-base origin/$BASE_BRANCH origin/$BRANCH)
            LAST_RELEASE_DATE=$(git show -s --format=%aI "$BASE_HASH")
            echo "Using merge-base commit $BASE_HASH with date $LAST_RELEASE_DATE"
          fi

          # Step 2: Generate release notes using --since
          NOTES=$( (git log origin/$BRANCH --since="$LAST_RELEASE_DATE" --pretty=format:"- %s ([%h]($REPO_URL/commit/%H)) (%an, %ad)" --date=short | grep -v "Update last release commit") || true )

          echo "### Release Notes for \`$BRANCH\`" >> $GITHUB_STEP_SUMMARY
          if [ -z "$NOTES" ]; then
            echo "_No new changes detected._" >> $GITHUB_STEP_SUMMARY
          else
            echo "$NOTES" >> $GITHUB_STEP_SUMMARY
          fi

          # Step 3: Save latest commit (excluding bot commits)
          LATEST=$(git log --pretty=format:"%H$DELIM%s" origin/$BRANCH | grep -v "Update last release commit" | head -n 1)
          echo "$LATEST" > $TRACK_FILE

      - name: Commit updated release tracking file
        run: |
          BRANCH="${{ github.event.inputs.branch }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .last_release_commit
          git diff --cached --quiet || git commit -m "Update last release commit for $BRANCH"

          git push origin HEAD:$BRANCH
